        <TabsContent value="calendar" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
            {/* Calendar Card */}
            <Card className="md:col-span-5">
              <CardHeader className="flex flex-row items-center justify-between space-y-0">
                <CardTitle>Calendar</CardTitle>
                <div className="flex items-center space-x-2">
                  <Button variant="outline" size="icon">
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <span className="text-sm font-medium">
                    {format(startOfToday(), "MMMM yyyy")}
                  </span>
                  <Button variant="outline" size="icon">
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {/* Calendar Grid Headers (Days of Week) */}
                <div className="grid grid-cols-7 gap-1 mb-2">
                  {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
                    <div key={day} className="text-center text-sm font-medium text-muted-foreground">
                      {day}
                    </div>
                  ))}
                </div>
                
                {/* Calendar Grid (Days of Month) */}
                <div className="grid grid-cols-7 gap-1">
                  {Array(35).fill(null).map((_, index) => {
                    const date = new Date(new Date().setDate(index - new Date().getDay() + 1));
                    const isCurrentMonth = isSameMonth(date, startOfToday());
                    const isCurrentDay = isSameDay(date, startOfToday());
                    const isWeekendDay = isWeekend(date);
                    
                    // Find appointments for this day
                    const dayAppointments = PLACEHOLDER_APPOINTMENTS.filter(
                      appointment => isSameDay(appointment.date, date)
                    );
                    
                    return (
                      <div
                        key={index}
                        className={`
                          p-2 h-24 overflow-hidden border rounded-sm
                          ${isCurrentMonth ? "bg-card" : "bg-muted/20 text-muted-foreground"}
                          ${isCurrentDay ? "border-primary" : "border-border"}
                          ${isWeekendDay ? "bg-muted/10" : ""}
                        `}
                      >
                        <div className="text-xs font-medium mb-1">
                          {format(date, "d")}
                        </div>
                        {dayAppointments.length > 0 && (
                          <div className="space-y-1">
                            {dayAppointments.slice(0, 2).map((appointment) => (
                              <div 
                                key={appointment.id} 
                                className="text-xs truncate bg-primary/10 rounded-sm px-1 py-0.5 text-primary"
                              >
                                {appointment.time} - {appointment.title}
                              </div>
                            ))}
                            {dayAppointments.length > 2 && (
                              <div className="text-xs text-muted-foreground">
                                +{dayAppointments.length - 2} more
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" size="sm">
                  <CalendarCheck2 className="h-4 w-4 mr-2" />
                  Schedule Appointment
                </Button>
                <Button variant="outline" size="sm">
                  Today
                </Button>
              </CardFooter>
            </Card>
          
            {/* Upcoming Appointments List */}
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Upcoming</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-sm font-medium">Today</h3>
                    <Separator className="my-2" />
                    {todayAppointments.length > 0 ? (
                      <div className="space-y-2">
                        {todayAppointments.map(appointment => (
                          <div key={appointment.id} className="flex justify-between items-center border-l-4 border-primary pl-3 py-2">
                            <div>
                              <p className="font-medium text-sm">{appointment.title}</p>
                              <p className="text-xs text-muted-foreground">
                                {appointment.time} with {appointment.clientName}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground">No appointments today.</p>
                    )}
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium">This Week</h3>
                    <Separator className="my-2" />
                    {thisWeekAppointments.length > 0 ? (
                      <div className="space-y-2">
                        {thisWeekAppointments
                          .filter(appointment => !isToday(appointment.date))
                          .slice(0, 3)
                          .map(appointment => (
                            <div key={appointment.id} className="flex justify-between items-center border-l-4 border-muted pl-3 py-2">
                              <div>
                                <p className="font-medium text-sm">{appointment.title}</p>
                                <p className="text-xs text-muted-foreground">
                                  {format(appointment.date, "EEE")} at {appointment.time}
                                </p>
                              </div>
                            </div>
                          ))}
                        {thisWeekAppointments.filter(appointment => !isToday(appointment.date)).length > 3 && (
                          <Button variant="ghost" size="sm" className="w-full justify-center text-xs">
                            View All ({thisWeekAppointments.filter(appointment => !isToday(appointment.date)).length})
                          </Button>
                        )}
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground">No appointments this week.</p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>